generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int            @id @default(autoincrement())
  username     String         @db.VarChar(30)
  password     String
  games        GamesOnUsers[]
  createdGames Game[]         @relation("game_creator")
  winnedGames  Game[]         @relation("game_winner")
  turns        Turn[]
  chatMessages ChatMessage[]
}

model Game {
  id        Int            @id @default(autoincrement())
  board     Board          @relation(fields: [boardId], references: [id])
  boardId   Int
  creator   User           @relation(fields: [creatorId], references: [id], name: "game_creator")
  creatorId Int
  winner    User?          @relation(fields: [winnerId], references: [id], name: "game_winner")
  winnerId  Int?
  status    GameStatus     @default(pending)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  users     GamesOnUsers[]
  turns     Turn[]
  chat      Chat?
}

enum GameStatus {
  pending
  in_process
  finished
}

model GamesOnUsers {
  user   User @relation(fields: [userId], references: [id])
  userId Int
  game   Game @relation(fields: [gameId], references: [id], onDelete: Cascade)
  gameId Int

  @@id([userId, gameId])
}

model BoardCell {
  id     Int                  @id @default(autoincrement())
  x      Int
  y      Int
  value  BoardCellValue
  boards BoardsOnBoardCells[]
  turns  TurnsOnBoardCells[]
}

enum BoardCellValue {
  w
  p
}

model Board {
  id         Int                  @id @default(autoincrement())
  games      Game[]
  exitX      Int
  exitY      Int
  boardCells BoardsOnBoardCells[]
}

model BoardsOnBoardCells {
  board                          Board     @relation(fields: [boardId], references: [id], onDelete: Cascade)
  boardId                        Int
  boardCell                      BoardCell @relation(fields: [boardCellId], references: [id], onDelete: Cascade)
  boardCellId                    Int
  suitableForUserInitialPosition Boolean   @default(false)

  @@id([boardId, boardCellId])
}

model Turn {
  id         Int                 @id @default(autoincrement())
  playerTurn Int
  gameTurn   Int
  player     User                @relation(fields: [playerId], references: [id])
  playerId   Int
  game       Game                @relation(fields: [gameId], references: [id], onDelete: Cascade)
  gameId     Int
  playerX    Int
  playerY    Int
  finished   Boolean             @default(false)
  boardCells TurnsOnBoardCells[]
}

model TurnsOnBoardCells {
  turn        Turn      @relation(fields: [turnId], references: [id], onDelete: Cascade)
  turnId      Int
  boardCell   BoardCell @relation(fields: [boardCellId], references: [id])
  boardCellId Int
  visible     Boolean   @default(false)

  @@id([turnId, boardCellId])
}

model Chat {
  id           Int           @id @default(autoincrement())
  game         Game          @relation(fields: [gameId], references: [id], onDelete: Cascade)
  gameId       Int           @unique
  chatMessages ChatMessage[]
}

model ChatMessage {
  id        Int      @id @default(autoincrement())
  text      String
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    Int
  createdAt DateTime @default(now())
}
